本周学习成长点：
1.css定位：
1)相对定位：position:relative;
按照元素的原始位置对该位置进行定位移动。
2)绝对定位：position:absolute;
通过设置，可放置到页面上任何位置。
3)固定定位：position:fixed;
可设置固定到页面任何位置不再移动。

2.state/props含义:
1).props:父组件传递给子组件的数据流
2).state:一个组件内自身的状态(可以是父组件、子组件)
3).props与state发生改变会导致重新渲染
//state改变只影响自身组件内部
//props改变可能会影响到子组件/孙组件等
4).props放初始化数据，一直不变的数据；
state放要改变的数据。
5).state应该包括可能被组件事件处理器改变并触发用户界面改变的数据，组件本身不能改变自己的props。
//即component的某些状态需要改变，会影响到component的render，此时状态应用state表示。
//component的某些状态有外部决定，用props.

3.向事件处理程序传递参数
箭头函数中事件对象必须显式传递，bind方式中事件对象及更多的参数会被隐式传递。
eg:<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
//上述实例中，参数e作为事件对象作为第二个参数传递。
<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>
//通过bind方式向监听函数传参，在类组件中定义的监听函数的事件e要排在所传参数的后面。

4.render:
必选的方法，创建虚拟DOM，规则：
只能通过this.props和this.state访问数据
可以返回null/false/React组件
不能返回数组
不能改变组件状态
不能改变DOM输出
(虚拟DOM在此处是用js对象来模拟DOM节点：
页面更新可以先全部反应在js对象上，更新完成后再将最终的js对象映射成真实的DOM。
)

5.React生命周期：
1)componentWillMount
首次渲染之前调用，此时state可修改
2)render 创建虚拟DOM
3)componentDidMount(所有render函数都调用完后才进行)
真实的DOM被渲染出来后被调用，this.getDOMNode()访问真实的DOM元素
(-----------------!!暂时只理解到这里-------------------)
4)componentWillReceiveProps
组件接收新的数据流时调用，将其作为参数nextProps使用，此时可更改组件props和state
componentWillReceiveProps(nextProps) {
        if (nextProps.bool) {
            this.setState({
                bool: true
            });
        }
    }
5)shouldComponentUpdate
组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法。
在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用
6)componentWillUpdate
接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。
7)componentDidUpdate
完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。





